import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Stack;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Blue
 */
public class ExplorerGUI extends javax.swing.JFrame {    
    private final File[] drives = File.listRoots();
    private final Stack<File> history;
    private File copyClipboard;
    private File cutClipboard;
    private final ArrayList<File> contents;
    private final Explorer explorer;
    private DefaultTableModel model;    
        
    public ExplorerGUI() {
        initComponents();  
        explorer = new Explorer();
        contents = new ArrayList();
        history = new Stack();
        loadTable();       
    }           
    
    private void open(File object) {
        if(object.isDirectory()) {
            history.push(object);
            loadFolder(object);
        }
        else {
            explorer.openText(object);
            refreshFolderView();
        }
    }
    
    private void addDoubleClickListenter() {
        folderView.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                Point p = me.getPoint();
                int row = folderView.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                    open(contents.get(row));
                }
            }
        });
    }               
    
    private boolean currentIsDrive() {
        return (history.size() == 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        folderView = new javax.swing.JTable();
        btnOpen = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        btnCut = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRename = new javax.swing.JButton();
        btnSplit = new javax.swing.JButton();
        btnCompress = new javax.swing.JButton();
        btnExtract = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnNewFile = new javax.swing.JButton();
        btnNewFolder = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JFileExplorer");

        folderView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Name", "Type", "Size"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        folderView.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        folderView.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(folderView);
        if (folderView.getColumnModel().getColumnCount() > 0) {
            folderView.getColumnModel().getColumn(0).setMinWidth(16);
            folderView.getColumnModel().getColumn(0).setPreferredWidth(16);
            folderView.getColumnModel().getColumn(0).setMaxWidth(16);
        }

        btnOpen.setText("Open");
        btnOpen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenMouseClicked(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });

        btnCopy.setText("Copy");
        btnCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCopyMouseClicked(evt);
            }
        });

        btnPaste.setText("Paste");
        btnPaste.setEnabled(false);
        btnPaste.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPasteMouseClicked(evt);
            }
        });

        btnCut.setText("Cut");
        btnCut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCutMouseClicked(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });

        btnRename.setText("Rename");
        btnRename.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRenameMouseClicked(evt);
            }
        });

        btnSplit.setText("Split");
        btnSplit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSplitMouseClicked(evt);
            }
        });

        btnCompress.setText("Compress");
        btnCompress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCompressMouseClicked(evt);
            }
        });

        btnExtract.setText("Extract");
        btnExtract.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExtractMouseClicked(evt);
            }
        });

        jButton4.setText("Merge");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        btnNewFile.setText("New File");
        btnNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFileActionPerformed(evt);
            }
        });

        btnNewFolder.setText("New Folder");
        btnNewFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFolderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCopy)
                            .addComponent(btnOpen))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRename, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPaste, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNewFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNewFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSplit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCompress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExtract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen)
                    .addComponent(btnBack)
                    .addComponent(btnRename)
                    .addComponent(btnDelete)
                    .addComponent(btnCompress)
                    .addComponent(btnSplit)
                    .addComponent(btnNewFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCopy)
                        .addComponent(btnPaste)
                        .addComponent(btnCut))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnExtract)
                        .addComponent(jButton4)
                        .addComponent(btnNewFolder)))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeAllRows() { 
        int rowCount = model.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    private void btnOpenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenMouseClicked
        if(folderView.getSelectedRow() != -1) {
            open(contents.get(folderView.getSelectedRow()));
        };
    }//GEN-LAST:event_btnOpenMouseClicked

    private void loadFolder(File folder) {        
        Object[] datas = explorer.
                getFolderContent(folder);

        contents.clear();
        removeAllRows();

        for(int i = 0; i < datas.length; i++) {       
            model.addRow((Object[]) datas[i]);
            File file = (File) ((Object[]) datas[i])[4];
            contents.add(file);
        }
        updateRowHeights();
    }        
    
    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        if(! currentIsDrive()) {
            history.pop();
            refreshFolderView();
        }
        else {
            loadDrive();
        }
    }//GEN-LAST:event_btnBackMouseClicked

    private void btnCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCopyMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {
           cutClipboard = null;
           copyClipboard = contents.get(folderView.getSelectedRow());   
           btnPaste.setEnabled(true);
        };
    }//GEN-LAST:event_btnCopyMouseClicked

    private void btnCutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCutMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {
           copyClipboard = null;
           cutClipboard = contents.get(folderView.getSelectedRow());
           btnPaste.setEnabled(true);
        };
    }//GEN-LAST:event_btnCutMouseClicked

    private void btnPasteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPasteMouseClicked
        if(copyClipboard != null) {
            File dest = new File(history.lastElement().getAbsolutePath() + 
                    "/" + copyClipboard.getName());
            explorer.copyTo(copyClipboard, dest);
        }
        else {
            File dest = new File(history.lastElement().getAbsolutePath() + 
                    "/" + cutClipboard.getName());
            explorer.cutTo(cutClipboard, dest);
            cutClipboard = null;
            btnPaste.setEnabled(false);
        }
        refreshFolderView();
    }//GEN-LAST:event_btnPasteMouseClicked

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {           
           File file = contents.get(folderView.getSelectedRow());
           explorer.delete(file);           
           refreshFolderView();
           
           if((copyClipboard != null && !copyClipboard.exists()) ||
                   cutClipboard != null && !cutClipboard.exists()) {
               btnPaste.setEnabled(false);
           }
               
        };
    }//GEN-LAST:event_btnDeleteMouseClicked

    private void btnRenameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRenameMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {           
           File file = contents.get(folderView.getSelectedRow());
           explorer.rename(file);  
           refreshFolderView();
        };
    }//GEN-LAST:event_btnRenameMouseClicked

    private void btnCompressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCompressMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {           
           File file = contents.get(folderView.getSelectedRow());
           explorer.compress(file);  
           refreshFolderView();
        };
    }//GEN-LAST:event_btnCompressMouseClicked

    private void btnExtractMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExtractMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {           
           File zipFile = contents.get(folderView.getSelectedRow());
           explorer.extract(zipFile);           
           refreshFolderView();
        };
    }//GEN-LAST:event_btnExtractMouseClicked

    private void btnSplitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSplitMouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {           
           File file = contents.get(folderView.getSelectedRow());
           explorer.split(file);
           refreshFolderView();
        };
    }//GEN-LAST:event_btnSplitMouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        if(folderView.getSelectedRow() != -1 && ! currentIsDrive()) {           
           File file = contents.get(folderView.getSelectedRow());
           explorer.merge(file);
           refreshFolderView();
        };
    }//GEN-LAST:event_jButton4MouseClicked

    private void btnNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFileActionPerformed
        if(! currentIsDrive()) {
            String parentPath = history.lastElement().getAbsolutePath();
            String fileName = JOptionPane.showInputDialog("File name: ");
            
            File newFile = new File(parentPath + File.separator + fileName);                  
            try {
                FileWriter output = new FileWriter(newFile);
                output.close();
            } catch (IOException ex) {
                
            }            
            refreshFolderView();
        }
    }//GEN-LAST:event_btnNewFileActionPerformed

    private void btnNewFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFolderActionPerformed
        if(! currentIsDrive()) {
            String parentPath = history.lastElement().getAbsolutePath();
            String fileName = JOptionPane.showInputDialog("Folder name: ");
            
            File newFolder = new File(parentPath + File.separator + fileName);                  
            newFolder.mkdir();
            
            refreshFolderView();
        }
    }//GEN-LAST:event_btnNewFolderActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExplorerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExplorerGUI().setVisible(true);
            }
        });
    }        
    
    private void refreshFolderView() {
        if(! currentIsDrive()) 
            loadFolder(history.lastElement());
        else 
            loadDrive();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCompress;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCut;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExtract;
    private javax.swing.JButton btnNewFile;
    private javax.swing.JButton btnNewFolder;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnRename;
    private javax.swing.JButton btnSplit;
    private javax.swing.JTable folderView;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void updateRowHeights()
    {
        for (int row = 0; row < folderView.getRowCount(); row++)
        {
            int rowHeight = folderView.getRowHeight();

            for (int column = 0; column < folderView.getColumnCount(); column++)
            {
                Component comp = folderView.prepareRenderer(folderView.getCellRenderer(row, column), row, column);
                rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
            }

            folderView.setRowHeight(row, rowHeight);
        }
    }
    
    private void loadDrive() {
        removeAllRows();
        contents.clear();
        for(File drive: drives) {
            Object[] data = explorer.getDriveInfo(drive);
            if(data != null) {
                contents.add(drive);
                model.addRow(data);
            }
        }
        updateRowHeights();
    }
    
    private void loadTable() {        
        folderView.setShowGrid(false);
        String[] columnNames = {"Icon", "Name", "Type", "Size"};
        model = new DefaultTableModel(new Object[0][], columnNames) {
            @Override
            public Class getColumnClass(int column) {
                return getValueAt(0, column).getClass();
            }
            @Override
            public boolean isCellEditable(int row, int column) {
               //all cells false
               return false;
            }
        };
        
        folderView.setModel(model);
        loadDrive(); 
        addDoubleClickListenter();
    }        
}
