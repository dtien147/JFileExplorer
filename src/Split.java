import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;

/**
 *
 * @author Blue
 */
public class Split extends javax.swing.JDialog {
    private File file;
    
    public Split(File file) {        
        super();
        initComponents();
        PlainDocument doc = (PlainDocument) txtSize.getDocument();
        doc.setDocumentFilter(new MyIntFilter());
        this.file = file;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        btnSplit = new javax.swing.JButton();
        cboSize = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Split File");

        jLabel1.setText("Size per part");

        txtSize.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        btnSplit.setText("Split");
        btnSplit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSplitMouseClicked(evt);
            }
        });

        cboSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Byte", "KB", "MB", "GB" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSplit)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(btnSplit))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void split(long partSize) {
        int partCount = 0;
        long totalSize = 0;
        byte[] buffer;
        try {
            InputStream in = new FileInputStream(file);
            while(totalSize < file.length()) {
                partCount++;
                OutputStream out = new FileOutputStream(file.getAbsolutePath() + 
                        ".part" + partCount);
                int currentSize = 0;
                while(currentSize < partSize && 
                        currentSize + totalSize < file.length()) {
                    int bufferSize = (int) Math.min(partSize - currentSize, 
                            1024);
                    buffer = new byte[bufferSize];
                    int length;
                    if((length = in.read(buffer)) > 0) {
                        out.write(buffer, 0, length);
                        currentSize += bufferSize;                        
                    }
                }
                out.close();
                totalSize += currentSize;
            }                
            in.close();
        } catch(Exception e) {}
    }
    
    private void btnSplitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSplitMouseClicked
        long partSize = (long) (Integer.parseInt(txtSize.getText()) * 
                Math.pow(2.0, cboSize.getSelectedIndex() * 10));
        if(partSize > file.length()) {
            JOptionPane.showMessageDialog(null, 
                    "Size per part larger than file size", 
                    "Error",
                    JOptionPane.INFORMATION_MESSAGE);            
        }
        else {
            split(partSize);
            this.dispose();
        }
    }//GEN-LAST:event_btnSplitMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSplit;
    private javax.swing.JComboBox<String> cboSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txtSize;
    // End of variables declaration//GEN-END:variables

    class MyIntFilter extends DocumentFilter {
        private final static int MAX_LENGTH = 4;
        
        @Override
        public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {

            Document doc = fb.getDocument();
            StringBuilder sb = new StringBuilder();
            sb.append(doc.getText(0, doc.getLength()));
            sb.insert(offset, string);

            if (test(sb.toString())) {
               super.insertString(fb, offset, string, attr);
            } 
        }

        private boolean test(String text) {
           try {
                if(text.length() > MAX_LENGTH) {
                    return false;
                }
                Integer.parseInt(text);
                return true;
           } catch (NumberFormatException e) {
                return false;
           }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text,
              AttributeSet attrs) throws BadLocationException {

           Document doc = fb.getDocument();
           StringBuilder sb = new StringBuilder();
           sb.append(doc.getText(0, doc.getLength()));
           sb.replace(offset, offset + length, text);

           if (test(sb.toString())) {
              super.replace(fb, offset, length, text, attrs);
           } 
        }

        @Override
        public void remove(FilterBypass fb, int offset, int length)
              throws BadLocationException {
           Document doc = fb.getDocument();
           StringBuilder sb = new StringBuilder();
           sb.append(doc.getText(0, doc.getLength()));
           sb.delete(offset, offset + length);

           if (test(sb.toString())) {
              super.remove(fb, offset, length);
           } else {
              // warn the user and don't allow the insert
           }

        }
     }
}
